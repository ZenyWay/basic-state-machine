!function(){return function t(e,n,r){function o(u,c){if(!n[u]){if(!e[u]){var a="function"==typeof require&&require;if(!c&&a)return a(u,!0);if(i)return i(u,!0);var f=new Error("Cannot find module '"+u+"'");throw f.code="MODULE_NOT_FOUND",f}var s=n[u]={exports:{}};e[u][0].call(s.exports,function(t){var n=e[u][1][t];return o(n||t)},s,s.exports,t,e,n,r)}return n[u].exports}for(var i="function"==typeof require&&require,u=0;u<r.length;u++)o(r[u]);return o}}()({1:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(t,e){return function t(e,n,r={}){if(r[n])return r;const o=r[n]={machine:function t(e){return e?o.commands[e]||[t,void 0]:n}};return o.commands=Object.keys(e[n]).reduce(function(o,i){const u=e[n][i],[c,a]=Array.isArray(u)?u:[u,void 0],{machine:f}=t(e,c,r)[c];return o[i]=[f,a],o},{}),r}(t,e)[e].machine}},{}],2:[function(t,e,n){"use strict";const r=t(1).default;describe("getStateMachine:",function(){describe("when called with an `AutomataSpec` and an initial state:",function(){let t;beforeEach(function(){t=r({foo:{BAR:["bar","foo-BAR"]},bar:{FOO:["foo","bar-FOO"],BAZ:"foo"}},"foo")}),it("returns a function",function(){expect(t).toEqual(jasmine.any(Function))}),describe("the returned function:",function(){let e,n;beforeEach(function(){n=t("BAR")[0],e=t("FOO")[0]}),it("is strictly equivalent to the state string it represents",function(){expect(e).toBe(t),expect(n("FOO")[0]).toBe(e),expect(e("BAR")[0]).toBe(n)}),describe("when called without argument",function(){let t;beforeEach(function(){(t=[]).push(e()),t.push(n())}),it("returns the current state",function(){expect(t).toEqual(["foo","bar"])})}),describe("when called with a command string",function(){let t;beforeEach(function(){(t=[]).push(e("BAR")),t.push(n("FOO")),t.push(n("BAZ")),t.push(e("FOO")),t.push(e("BAZ"))}),it("returns an array with the next state function and the command payload from the current state",function(){expect(t[0]).toEqual([n,"foo-BAR"]),expect(t[1]).toEqual([e,"bar-FOO"]),expect(t[2]).toEqual([e,void 0])}),it("returns an array with the current state function and an `undefined` entry when the command is not recognized in the current state",function(){expect(t[3]).toEqual([e,void 0]),expect(t[4]).toEqual([e,void 0])})})})})})},{1:1}]},{},[2]);
